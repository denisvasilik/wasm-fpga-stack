-- Copyright (C) 2022 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler v0.0.0-0000000
-- VHDL Extension for HxS v0.0.0-0000000
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package WasmFpgaStackPackage is

	type T_WasmFpgaStackWishboneDown is
	record
		Adr : std_logic_vector(23 downto 0);
		Sel : std_logic_vector(3 downto 0);
		DatIn : std_logic_vector(31 downto 0);
		We : std_logic;
		Stb : std_logic;
		Cyc : std_logic_vector(0 downto 0);
	end record;
	
	type array_of_T_WasmFpgaStackWishboneDown is
	  array (natural range <>) of T_WasmFpgaStackWishboneDown;
	
	type T_WasmFpgaStackWishboneUp is
	record
		DatOut : std_logic_vector(31 downto 0);
		Ack : std_logic;
	end record;
	
	type array_of_T_WasmFpgaStackWishboneUp is
	  array (natural range <>) of T_WasmFpgaStackWishboneUp;
	
	type T_WasmFpgaStackWishboneUnoccupied is
	record
		Adr : std_logic_vector(23 downto 0);
		Sel : std_logic_vector(3 downto 0);
		We : std_logic;
		Cyc : std_logic_vector(0 downto 0);
		Ack : std_logic;
	end record;
	
	type array_of_T_WasmFpgaStackWishboneUnoccupied is
	  array (natural range <>) of T_WasmFpgaStackWishboneUnoccupied;
	
	type T_WasmFpgaStackWishbone_StackBlk is
	record
		Action : std_logic_vector(2 downto 0);
		Run : std_logic;
		HighValueWritten : std_logic_vector(31 downto 0);
		LowValueWritten : std_logic_vector(31 downto 0);
		TypeWritten : std_logic_vector(2 downto 0);
		LocalIndex : std_logic_vector(31 downto 0);
		StackAddressWritten : std_logic_vector(31 downto 0);
		MaxLocalsWritten : std_logic_vector(31 downto 0);
		MaxResultsWritten : std_logic_vector(31 downto 0);
		ReturnAddressWritten : std_logic_vector(31 downto 0);
		ModuleInstanceUidWritten : std_logic_vector(31 downto 0);
		ActivationFrameAddressWritten : std_logic_vector(31 downto 0);
		WRegPulseControlReg : std_logic;
		WRegPulseStackAddressReg : std_logic;
		WRegPulseActivationFrameAddressReg : std_logic;
	end record;
	
	type array_of_T_WasmFpgaStackWishbone_StackBlk is
	  array (natural range <>) of T_WasmFpgaStackWishbone_StackBlk;
	
	type T_StackBlk_WasmFpgaStackWishbone is
	record
		Busy : std_logic;
		SizeValue : std_logic_vector(31 downto 0);
		HighValueToBeRead : std_logic_vector(31 downto 0);
		LowValueToBeRead : std_logic_vector(31 downto 0);
		TypeToBeRead : std_logic_vector(2 downto 0);
		StackAddressToBeRead : std_logic_vector(31 downto 0);
		MaxLocalsToBeRead : std_logic_vector(31 downto 0);
		MaxResultsToBeRead : std_logic_vector(31 downto 0);
		ReturnAddressToBeRead : std_logic_vector(31 downto 0);
		ModuleInstanceUidToBeRead : std_logic_vector(31 downto 0);
		ActivationFrameAddressToBeRead : std_logic_vector(31 downto 0);
	end record;
	
	type array_of_T_StackBlk_WasmFpgaStackWishbone is
	  array (natural range <>) of T_StackBlk_WasmFpgaStackWishbone;
	
	constant WASMFPGASTACK_ADR_BLK_BASE_StackBlk : std_logic_vector(23 downto 0) := x"000000";
	constant WASMFPGASTACK_ADR_BLK_SIZE_StackBlk : std_logic_vector(23 downto 0) := x"000034";
	
	constant WASMFPGASTACK_WIDTH_ControlReg : integer := 32;
	constant WASMFPGASTACK_ADR_ControlReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000000" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_Action : std_logic_vector(31 downto 0) := x"00000007";
	constant WASMFPGASTACK_VAL_Action_Push : std_logic_vector(2 downto 0) := b"000";
	constant WASMFPGASTACK_VAL_Action_Pop : std_logic_vector(2 downto 0) := b"001";
	constant WASMFPGASTACK_VAL_Action_LocalGet : std_logic_vector(2 downto 0) := b"010";
	constant WASMFPGASTACK_VAL_Action_LocalSet : std_logic_vector(2 downto 0) := b"011";
	constant WASMFPGASTACK_VAL_Action_CreateActivationFrame : std_logic_vector(2 downto 0) := b"100";
	constant WASMFPGASTACK_VAL_Action_RemoveActivationFrame : std_logic_vector(2 downto 0) := b"101";
	
	constant WASMFPGASTACK_BUS_MASK_Run : std_logic_vector(31 downto 0) := x"00000001";
	constant WASMFPGASTACK_VAL_Run_DoNotRun : std_logic := '0';
	constant WASMFPGASTACK_VAL_Run_DoRun : std_logic := '1';
	
	constant WASMFPGASTACK_WIDTH_StatusReg : integer := 32;
	constant WASMFPGASTACK_ADR_StatusReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000004" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_Busy : std_logic_vector(31 downto 0) := x"00000001";
	constant WASMFPGASTACK_VAL_Busy_IsNotBusy : std_logic := '0';
	constant WASMFPGASTACK_VAL_Busy_IsBusy : std_logic := '1';
	
	constant WASMFPGASTACK_WIDTH_SizeReg : integer := 32;
	constant WASMFPGASTACK_ADR_SizeReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000008" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_SizeValue : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_HighValueReg : integer := 32;
	constant WASMFPGASTACK_ADR_HighValueReg : std_logic_vector(23 downto 0) := std_logic_vector(x"00000C" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_HighValue : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_LowValueReg : integer := 32;
	constant WASMFPGASTACK_ADR_LowValueReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000010" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_LowValue : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_TypeReg : integer := 32;
	constant WASMFPGASTACK_ADR_TypeReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000014" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_Type : std_logic_vector(31 downto 0) := x"00000007";
	constant WASMFPGASTACK_VAL_Type_i32 : std_logic_vector(2 downto 0) := b"000";
	constant WASMFPGASTACK_VAL_Type_i64 : std_logic_vector(2 downto 0) := b"001";
	constant WASMFPGASTACK_VAL_Type_f32 : std_logic_vector(2 downto 0) := b"010";
	constant WASMFPGASTACK_VAL_Type_f64 : std_logic_vector(2 downto 0) := b"011";
	constant WASMFPGASTACK_VAL_Type_Label : std_logic_vector(2 downto 0) := b"100";
	constant WASMFPGASTACK_VAL_Type_Activation : std_logic_vector(2 downto 0) := b"101";
	
	constant WASMFPGASTACK_WIDTH_LocalIndexReg : integer := 32;
	constant WASMFPGASTACK_ADR_LocalIndexReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000018" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_LocalIndex : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_StackAddressReg : integer := 32;
	constant WASMFPGASTACK_ADR_StackAddressReg : std_logic_vector(23 downto 0) := std_logic_vector(x"00001C" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_StackAddress : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_MaxLocalsReg : integer := 32;
	constant WASMFPGASTACK_ADR_MaxLocalsReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000020" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_MaxLocals : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_MaxResultsReg : integer := 32;
	constant WASMFPGASTACK_ADR_MaxResultsReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000024" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_MaxResults : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_ReturnAddressReg : integer := 32;
	constant WASMFPGASTACK_ADR_ReturnAddressReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000028" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_ReturnAddress : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_ModuleInstanceUidReg : integer := 32;
	constant WASMFPGASTACK_ADR_ModuleInstanceUidReg : std_logic_vector(23 downto 0) := std_logic_vector(x"00002C" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_ModuleInstanceUid : std_logic_vector(31 downto 0) := x"FFFFFFFF";
	constant WASMFPGASTACK_WIDTH_ActivationFrameAddressReg : integer := 32;
	constant WASMFPGASTACK_ADR_ActivationFrameAddressReg : std_logic_vector(23 downto 0) := std_logic_vector(x"000030" + unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk));
	
	constant WASMFPGASTACK_BUS_MASK_ActivationFrameAddress : std_logic_vector(31 downto 0) := x"FFFFFFFF";

end;
