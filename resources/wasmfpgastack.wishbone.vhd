-- Copyright (C) 2022 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler v0.0.0-0000000
-- VHDL Extension for HxS v0.0.0-0000000
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

library work;
  use work.WasmFpgaStackPackage.all;

entity StackBlk_WasmFpgaStack is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Adr : in std_logic_vector(23 downto 0);
		Sel : in std_logic_vector(3 downto 0);
		DatIn : in std_logic_vector(31 downto 0);
		We : in std_logic;
		Stb : in std_logic;
		Cyc : in  std_logic_vector(0 downto 0);
		DatOut : out std_logic_vector(31 downto 0);
		Ack : out std_logic;
		UnoccupiedAck : out std_logic;
		Action : out std_logic_vector(2 downto 0);
		Run : out std_logic;
		WRegPulseControlReg : out std_logic;
		Busy : in std_logic;
		SizeValue : in std_logic_vector(31 downto 0);
		HighValueToBeRead : in std_logic_vector(31 downto 0);
		HighValueWritten : out std_logic_vector(31 downto 0);
		LowValueToBeRead : in std_logic_vector(31 downto 0);
		LowValueWritten : out std_logic_vector(31 downto 0);
		TypeToBeRead : in std_logic_vector(2 downto 0);
		TypeWritten : out std_logic_vector(2 downto 0);
		LocalIndex : out std_logic_vector(31 downto 0);
		StackAddressToBeRead : in std_logic_vector(31 downto 0);
		StackAddressWritten : out std_logic_vector(31 downto 0);
		WRegPulseStackAddressReg : out std_logic;
		MaxLocalsToBeRead : in std_logic_vector(31 downto 0);
		MaxLocalsWritten : out std_logic_vector(31 downto 0);
		MaxResultsToBeRead : in std_logic_vector(31 downto 0);
		MaxResultsWritten : out std_logic_vector(31 downto 0);
		ReturnAddressToBeRead : in std_logic_vector(31 downto 0);
		ReturnAddressWritten : out std_logic_vector(31 downto 0);
		ModuleInstanceUidToBeRead : in std_logic_vector(31 downto 0);
		ModuleInstanceUidWritten : out std_logic_vector(31 downto 0);
		ActivationFrameAddressToBeRead : in std_logic_vector(31 downto 0);
		ActivationFrameAddressWritten : out std_logic_vector(31 downto 0);
		WRegPulseActivationFrameAddressReg : out std_logic
	);
end;

architecture Behavioural of StackBlk_WasmFpgaStack is

	signal PreMuxAckUnoccupied : std_logic;
	signal UnoccupiedDec : std_logic_vector(1 downto 0);
	
	signal PreDatOut : std_logic_vector(31 downto 0);
	signal PreAck : std_logic;
	signal UnoccupiedPreAck : std_logic;
	
	signal PreMuxDatOutControlReg : std_logic_vector(31 downto 0);
	signal PreMuxAckControlReg : std_logic;
	
	signal WriteDiffControlReg : std_logic;
	signal ReadDiffControlReg : std_logic;
	signal DelWriteDiffControlReg : std_logic;
	signal WRegAction : std_logic_vector(2 downto 0);
	signal WRegRun : std_logic;
	signal PreMuxDatOutStatusReg : std_logic_vector(31 downto 0);
	signal PreMuxAckStatusReg : std_logic;
	
	signal WriteDiffStatusReg : std_logic;
	signal ReadDiffStatusReg : std_logic;
	signal PreMuxDatOutSizeReg : std_logic_vector(31 downto 0);
	signal PreMuxAckSizeReg : std_logic;
	
	signal WriteDiffSizeReg : std_logic;
	signal ReadDiffSizeReg : std_logic;
	signal PreMuxDatOutHighValueReg : std_logic_vector(31 downto 0);
	signal PreMuxAckHighValueReg : std_logic;
	
	signal WriteDiffHighValueReg : std_logic;
	signal ReadDiffHighValueReg : std_logic;
	signal WRegHighValueWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutLowValueReg : std_logic_vector(31 downto 0);
	signal PreMuxAckLowValueReg : std_logic;
	
	signal WriteDiffLowValueReg : std_logic;
	signal ReadDiffLowValueReg : std_logic;
	signal WRegLowValueWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutTypeReg : std_logic_vector(31 downto 0);
	signal PreMuxAckTypeReg : std_logic;
	
	signal WriteDiffTypeReg : std_logic;
	signal ReadDiffTypeReg : std_logic;
	signal WRegTypeWritten : std_logic_vector(2 downto 0);
	signal PreMuxDatOutLocalIndexReg : std_logic_vector(31 downto 0);
	signal PreMuxAckLocalIndexReg : std_logic;
	
	signal WriteDiffLocalIndexReg : std_logic;
	signal ReadDiffLocalIndexReg : std_logic;
	signal WRegLocalIndex : std_logic_vector(31 downto 0);
	signal PreMuxDatOutStackAddressReg : std_logic_vector(31 downto 0);
	signal PreMuxAckStackAddressReg : std_logic;
	
	signal WriteDiffStackAddressReg : std_logic;
	signal ReadDiffStackAddressReg : std_logic;
	signal DelWriteDiffStackAddressReg : std_logic;
	signal WRegStackAddressWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutMaxLocalsReg : std_logic_vector(31 downto 0);
	signal PreMuxAckMaxLocalsReg : std_logic;
	
	signal WriteDiffMaxLocalsReg : std_logic;
	signal ReadDiffMaxLocalsReg : std_logic;
	signal WRegMaxLocalsWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutMaxResultsReg : std_logic_vector(31 downto 0);
	signal PreMuxAckMaxResultsReg : std_logic;
	
	signal WriteDiffMaxResultsReg : std_logic;
	signal ReadDiffMaxResultsReg : std_logic;
	signal WRegMaxResultsWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutReturnAddressReg : std_logic_vector(31 downto 0);
	signal PreMuxAckReturnAddressReg : std_logic;
	
	signal WriteDiffReturnAddressReg : std_logic;
	signal ReadDiffReturnAddressReg : std_logic;
	signal WRegReturnAddressWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutModuleInstanceUidReg : std_logic_vector(31 downto 0);
	signal PreMuxAckModuleInstanceUidReg : std_logic;
	
	signal WriteDiffModuleInstanceUidReg : std_logic;
	signal ReadDiffModuleInstanceUidReg : std_logic;
	signal WRegModuleInstanceUidWritten : std_logic_vector(31 downto 0);
	signal PreMuxDatOutActivationFrameAddressReg : std_logic_vector(31 downto 0);
	signal PreMuxAckActivationFrameAddressReg : std_logic;
	
	signal WriteDiffActivationFrameAddressReg : std_logic;
	signal ReadDiffActivationFrameAddressReg : std_logic;
	signal DelWriteDiffActivationFrameAddressReg : std_logic;
	signal WRegActivationFrameAddressWritten : std_logic_vector(31 downto 0);

begin

	GenerateUnoccupiedAcknowledge : process (Clk, Rst)
	begin 
		if (Rst = '1') then 
			PreMuxAckUnoccupied <= '0';
			UnoccupiedDec <= "00";
		elsif rising_edge(Clk) then
			UnoccupiedDec(0) <= UnoccupiedDec(1); 
			UnoccupiedDec(1) <= Cyc(0) and Stb;
			PreMuxAckUnoccupied <= UnoccupiedDec(1) and not UnoccupiedDec(0);
		end if;
	end process;
	
	DatOut <= PreDatOut;
	Ack <=  PreAck;
	UnoccupiedAck <= UnoccupiedPreAck;
	
	DataAckOutMux: process (
		Cyc,
		Adr,
		PreMuxDatOutControlReg,
		PreMuxAckControlReg,
		PreMuxDatOutStatusReg,
		PreMuxAckStatusReg,
		PreMuxDatOutSizeReg,
		PreMuxAckSizeReg,
		PreMuxDatOutHighValueReg,
		PreMuxAckHighValueReg,
		PreMuxDatOutLowValueReg,
		PreMuxAckLowValueReg,
		PreMuxDatOutTypeReg,
		PreMuxAckTypeReg,
		PreMuxDatOutLocalIndexReg,
		PreMuxAckLocalIndexReg,
		PreMuxDatOutStackAddressReg,
		PreMuxAckStackAddressReg,
		PreMuxDatOutMaxLocalsReg,
		PreMuxAckMaxLocalsReg,
		PreMuxDatOutMaxResultsReg,
		PreMuxAckMaxResultsReg,
		PreMuxDatOutReturnAddressReg,
		PreMuxAckReturnAddressReg,
		PreMuxDatOutModuleInstanceUidReg,
		PreMuxAckModuleInstanceUidReg,
		PreMuxDatOutActivationFrameAddressReg,
		PreMuxAckActivationFrameAddressReg,
		PreMuxAckUnoccupied
	) begin
		PreDatOut <= (others => '0');
		PreAck <= '0';
		UnoccupiedPreAck <= '0';
		if ((Cyc(0) = '1') 
			and (unsigned(Adr) >= unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk) )
			and (unsigned(Adr) <= (unsigned(WASMFPGASTACK_ADR_BLK_BASE_StackBlk) + unsigned(WASMFPGASTACK_ADR_BLK_SIZE_StackBlk) - 1)))
		then
			if ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_ControlReg))) then
				PreDatOut <= PreMuxDatOutControlReg;
				PreAck <= PreMuxAckControlReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_StatusReg))) then
				PreDatOut <= PreMuxDatOutStatusReg;
				PreAck <= PreMuxAckStatusReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_SizeReg))) then
				PreDatOut <= PreMuxDatOutSizeReg;
				PreAck <= PreMuxAckSizeReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_HighValueReg))) then
				PreDatOut <= PreMuxDatOutHighValueReg;
				PreAck <= PreMuxAckHighValueReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_LowValueReg))) then
				PreDatOut <= PreMuxDatOutLowValueReg;
				PreAck <= PreMuxAckLowValueReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_TypeReg))) then
				PreDatOut <= PreMuxDatOutTypeReg;
				PreAck <= PreMuxAckTypeReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_LocalIndexReg))) then
				PreDatOut <= PreMuxDatOutLocalIndexReg;
				PreAck <= PreMuxAckLocalIndexReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_StackAddressReg))) then
				PreDatOut <= PreMuxDatOutStackAddressReg;
				PreAck <= PreMuxAckStackAddressReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_MaxLocalsReg))) then
				PreDatOut <= PreMuxDatOutMaxLocalsReg;
				PreAck <= PreMuxAckMaxLocalsReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_MaxResultsReg))) then
				PreDatOut <= PreMuxDatOutMaxResultsReg;
				PreAck <= PreMuxAckMaxResultsReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_ReturnAddressReg))) then
				PreDatOut <= PreMuxDatOutReturnAddressReg;
				PreAck <= PreMuxAckReturnAddressReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_ModuleInstanceUidReg))) then
				PreDatOut <= PreMuxDatOutModuleInstanceUidReg;
				PreAck <= PreMuxAckModuleInstanceUidReg;
			elsif ((unsigned(Adr)/4)*4  = (unsigned(WASMFPGASTACK_ADR_ActivationFrameAddressReg))) then
				PreDatOut <= PreMuxDatOutActivationFrameAddressReg;
				PreAck <= PreMuxAckActivationFrameAddressReg;
			else
				PreAck <= PreMuxAckUnoccupied;
				UnoccupiedPreAck <= PreMuxAckUnoccupied;
			end if;
		end if;
	end process;

	WriteAckImmediateControlReg : process (Adr, We, Stb, Cyc, PreMuxAckControlReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ControlReg)) then 
			WriteDiffControlReg <=  We and Stb and Cyc(0) and not PreMuxAckControlReg;
		else
			WriteDiffControlReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateControlReg : process (Adr, We, Stb, Cyc, PreMuxAckControlReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ControlReg)) then 
			ReadDiffControlReg <= not We and Stb and Cyc(0) and not PreMuxAckControlReg;
		else
			ReadDiffControlReg <= '0';
		end if;
	end process;
	
	SyncClockPartControlReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			DelWriteDiffControlReg <= '0'; 
			PreMuxAckControlReg <= '0';
			WRegAction <= (others => '0');
			WRegRun <= '0';
		elsif rising_edge(Clk) then
			DelWriteDiffControlReg <= WriteDiffControlReg;
			PreMuxAckControlReg <= WriteDiffControlReg or ReadDiffControlReg;
			if (WriteDiffControlReg = '1') then
				if (Sel(0) = '1') then WRegRun <= DatIn(3); end if;
				if (Sel(0) = '1') then WRegAction(2 downto 0) <= DatIn(2 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForControlReg : process (
		WRegAction,
		WRegRun
	) begin
		PreMuxDatOutControlReg <= (others => '0');
		PreMuxDatOutControlReg(2 downto 0) <= WRegAction;
		PreMuxDatOutControlReg(3) <= WRegRun;
	end process;
	
	WRegPulseControlReg <= DelWriteDiffControlReg;
	
	Action <= WRegAction;
	Run <= WRegRun;
	WriteAckImmediateStatusReg : process (Adr, We, Stb, Cyc, PreMuxAckStatusReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_StatusReg)) then 
			WriteDiffStatusReg <=  We and Stb and Cyc(0) and not PreMuxAckStatusReg;
		else
			WriteDiffStatusReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateStatusReg : process (Adr, We, Stb, Cyc, PreMuxAckStatusReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_StatusReg)) then 
			ReadDiffStatusReg <= not We and Stb and Cyc(0) and not PreMuxAckStatusReg;
		else
			ReadDiffStatusReg <= '0';
		end if;
	end process;
	
	SyncClockPartStatusReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckStatusReg <= '0';
		elsif rising_edge(Clk) then
			PreMuxAckStatusReg <= WriteDiffStatusReg or ReadDiffStatusReg;
		end if;
	end process;
	
	DataOutPreMuxForStatusReg : process (
		Busy
	) begin
		PreMuxDatOutStatusReg <= (others => '0');
		PreMuxDatOutStatusReg(0) <= Busy;
	end process;
	
	WriteAckImmediateSizeReg : process (Adr, We, Stb, Cyc, PreMuxAckSizeReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_SizeReg)) then 
			WriteDiffSizeReg <=  We and Stb and Cyc(0) and not PreMuxAckSizeReg;
		else
			WriteDiffSizeReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateSizeReg : process (Adr, We, Stb, Cyc, PreMuxAckSizeReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_SizeReg)) then 
			ReadDiffSizeReg <= not We and Stb and Cyc(0) and not PreMuxAckSizeReg;
		else
			ReadDiffSizeReg <= '0';
		end if;
	end process;
	
	SyncClockPartSizeReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckSizeReg <= '0';
		elsif rising_edge(Clk) then
			PreMuxAckSizeReg <= WriteDiffSizeReg or ReadDiffSizeReg;
		end if;
	end process;
	
	DataOutPreMuxForSizeReg : process (
		SizeValue
	) begin
		PreMuxDatOutSizeReg <= (others => '0');
		PreMuxDatOutSizeReg(31 downto 0) <= SizeValue;
	end process;
	
	WriteAckImmediateHighValueReg : process (Adr, We, Stb, Cyc, PreMuxAckHighValueReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_HighValueReg)) then 
			WriteDiffHighValueReg <=  We and Stb and Cyc(0) and not PreMuxAckHighValueReg;
		else
			WriteDiffHighValueReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateHighValueReg : process (Adr, We, Stb, Cyc, PreMuxAckHighValueReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_HighValueReg)) then 
			ReadDiffHighValueReg <= not We and Stb and Cyc(0) and not PreMuxAckHighValueReg;
		else
			ReadDiffHighValueReg <= '0';
		end if;
	end process;
	
	SyncClockPartHighValueReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckHighValueReg <= '0';
			WRegHighValueWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckHighValueReg <= WriteDiffHighValueReg or ReadDiffHighValueReg;
			if (WriteDiffHighValueReg = '1') then
				if (Sel(3) = '1') then WRegHighValueWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegHighValueWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegHighValueWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegHighValueWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForHighValueReg : process (
		HighValueToBeRead
	) begin
		PreMuxDatOutHighValueReg <= (others => '0');
		PreMuxDatOutHighValueReg(31 downto 0) <= HighValueToBeRead;
	end process;
	
	
	HighValueWritten <= WRegHighValueWritten;
	WriteAckImmediateLowValueReg : process (Adr, We, Stb, Cyc, PreMuxAckLowValueReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_LowValueReg)) then 
			WriteDiffLowValueReg <=  We and Stb and Cyc(0) and not PreMuxAckLowValueReg;
		else
			WriteDiffLowValueReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateLowValueReg : process (Adr, We, Stb, Cyc, PreMuxAckLowValueReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_LowValueReg)) then 
			ReadDiffLowValueReg <= not We and Stb and Cyc(0) and not PreMuxAckLowValueReg;
		else
			ReadDiffLowValueReg <= '0';
		end if;
	end process;
	
	SyncClockPartLowValueReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckLowValueReg <= '0';
			WRegLowValueWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckLowValueReg <= WriteDiffLowValueReg or ReadDiffLowValueReg;
			if (WriteDiffLowValueReg = '1') then
				if (Sel(3) = '1') then WRegLowValueWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegLowValueWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegLowValueWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegLowValueWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForLowValueReg : process (
		LowValueToBeRead
	) begin
		PreMuxDatOutLowValueReg <= (others => '0');
		PreMuxDatOutLowValueReg(31 downto 0) <= LowValueToBeRead;
	end process;
	
	
	LowValueWritten <= WRegLowValueWritten;
	WriteAckImmediateTypeReg : process (Adr, We, Stb, Cyc, PreMuxAckTypeReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_TypeReg)) then 
			WriteDiffTypeReg <=  We and Stb and Cyc(0) and not PreMuxAckTypeReg;
		else
			WriteDiffTypeReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateTypeReg : process (Adr, We, Stb, Cyc, PreMuxAckTypeReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_TypeReg)) then 
			ReadDiffTypeReg <= not We and Stb and Cyc(0) and not PreMuxAckTypeReg;
		else
			ReadDiffTypeReg <= '0';
		end if;
	end process;
	
	SyncClockPartTypeReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckTypeReg <= '0';
			WRegTypeWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckTypeReg <= WriteDiffTypeReg or ReadDiffTypeReg;
			if (WriteDiffTypeReg = '1') then
				if (Sel(0) = '1') then WRegTypeWritten(2 downto 0) <= DatIn(2 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForTypeReg : process (
		TypeToBeRead
	) begin
		PreMuxDatOutTypeReg <= (others => '0');
		PreMuxDatOutTypeReg(2 downto 0) <= TypeToBeRead;
	end process;
	
	
	TypeWritten <= WRegTypeWritten;
	WriteAckImmediateLocalIndexReg : process (Adr, We, Stb, Cyc, PreMuxAckLocalIndexReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_LocalIndexReg)) then 
			WriteDiffLocalIndexReg <=  We and Stb and Cyc(0) and not PreMuxAckLocalIndexReg;
		else
			WriteDiffLocalIndexReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateLocalIndexReg : process (Adr, We, Stb, Cyc, PreMuxAckLocalIndexReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_LocalIndexReg)) then 
			ReadDiffLocalIndexReg <= not We and Stb and Cyc(0) and not PreMuxAckLocalIndexReg;
		else
			ReadDiffLocalIndexReg <= '0';
		end if;
	end process;
	
	SyncClockPartLocalIndexReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckLocalIndexReg <= '0';
			WRegLocalIndex <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckLocalIndexReg <= WriteDiffLocalIndexReg or ReadDiffLocalIndexReg;
			if (WriteDiffLocalIndexReg = '1') then
				if (Sel(3) = '1') then WRegLocalIndex(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegLocalIndex(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegLocalIndex(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegLocalIndex(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForLocalIndexReg : process (
		WRegLocalIndex
	) begin
		PreMuxDatOutLocalIndexReg <= (others => '0');
		PreMuxDatOutLocalIndexReg(31 downto 0) <= WRegLocalIndex;
	end process;
	
	
	LocalIndex <= WRegLocalIndex;
	WriteAckImmediateStackAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckStackAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_StackAddressReg)) then 
			WriteDiffStackAddressReg <=  We and Stb and Cyc(0) and not PreMuxAckStackAddressReg;
		else
			WriteDiffStackAddressReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateStackAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckStackAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_StackAddressReg)) then 
			ReadDiffStackAddressReg <= not We and Stb and Cyc(0) and not PreMuxAckStackAddressReg;
		else
			ReadDiffStackAddressReg <= '0';
		end if;
	end process;
	
	SyncClockPartStackAddressReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			DelWriteDiffStackAddressReg <= '0'; 
			PreMuxAckStackAddressReg <= '0';
			WRegStackAddressWritten <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffStackAddressReg <= WriteDiffStackAddressReg;
			PreMuxAckStackAddressReg <= WriteDiffStackAddressReg or ReadDiffStackAddressReg;
			if (WriteDiffStackAddressReg = '1') then
				if (Sel(3) = '1') then WRegStackAddressWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegStackAddressWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegStackAddressWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegStackAddressWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForStackAddressReg : process (
		StackAddressToBeRead
	) begin
		PreMuxDatOutStackAddressReg <= (others => '0');
		PreMuxDatOutStackAddressReg(31 downto 0) <= StackAddressToBeRead;
	end process;
	
	WRegPulseStackAddressReg <= DelWriteDiffStackAddressReg;
	
	StackAddressWritten <= WRegStackAddressWritten;
	WriteAckImmediateMaxLocalsReg : process (Adr, We, Stb, Cyc, PreMuxAckMaxLocalsReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_MaxLocalsReg)) then 
			WriteDiffMaxLocalsReg <=  We and Stb and Cyc(0) and not PreMuxAckMaxLocalsReg;
		else
			WriteDiffMaxLocalsReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateMaxLocalsReg : process (Adr, We, Stb, Cyc, PreMuxAckMaxLocalsReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_MaxLocalsReg)) then 
			ReadDiffMaxLocalsReg <= not We and Stb and Cyc(0) and not PreMuxAckMaxLocalsReg;
		else
			ReadDiffMaxLocalsReg <= '0';
		end if;
	end process;
	
	SyncClockPartMaxLocalsReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckMaxLocalsReg <= '0';
			WRegMaxLocalsWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckMaxLocalsReg <= WriteDiffMaxLocalsReg or ReadDiffMaxLocalsReg;
			if (WriteDiffMaxLocalsReg = '1') then
				if (Sel(3) = '1') then WRegMaxLocalsWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegMaxLocalsWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegMaxLocalsWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegMaxLocalsWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForMaxLocalsReg : process (
		MaxLocalsToBeRead
	) begin
		PreMuxDatOutMaxLocalsReg <= (others => '0');
		PreMuxDatOutMaxLocalsReg(31 downto 0) <= MaxLocalsToBeRead;
	end process;
	
	
	MaxLocalsWritten <= WRegMaxLocalsWritten;
	WriteAckImmediateMaxResultsReg : process (Adr, We, Stb, Cyc, PreMuxAckMaxResultsReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_MaxResultsReg)) then 
			WriteDiffMaxResultsReg <=  We and Stb and Cyc(0) and not PreMuxAckMaxResultsReg;
		else
			WriteDiffMaxResultsReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateMaxResultsReg : process (Adr, We, Stb, Cyc, PreMuxAckMaxResultsReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_MaxResultsReg)) then 
			ReadDiffMaxResultsReg <= not We and Stb and Cyc(0) and not PreMuxAckMaxResultsReg;
		else
			ReadDiffMaxResultsReg <= '0';
		end if;
	end process;
	
	SyncClockPartMaxResultsReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckMaxResultsReg <= '0';
			WRegMaxResultsWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckMaxResultsReg <= WriteDiffMaxResultsReg or ReadDiffMaxResultsReg;
			if (WriteDiffMaxResultsReg = '1') then
				if (Sel(3) = '1') then WRegMaxResultsWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegMaxResultsWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegMaxResultsWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegMaxResultsWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForMaxResultsReg : process (
		MaxResultsToBeRead
	) begin
		PreMuxDatOutMaxResultsReg <= (others => '0');
		PreMuxDatOutMaxResultsReg(31 downto 0) <= MaxResultsToBeRead;
	end process;
	
	
	MaxResultsWritten <= WRegMaxResultsWritten;
	WriteAckImmediateReturnAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckReturnAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ReturnAddressReg)) then 
			WriteDiffReturnAddressReg <=  We and Stb and Cyc(0) and not PreMuxAckReturnAddressReg;
		else
			WriteDiffReturnAddressReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateReturnAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckReturnAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ReturnAddressReg)) then 
			ReadDiffReturnAddressReg <= not We and Stb and Cyc(0) and not PreMuxAckReturnAddressReg;
		else
			ReadDiffReturnAddressReg <= '0';
		end if;
	end process;
	
	SyncClockPartReturnAddressReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckReturnAddressReg <= '0';
			WRegReturnAddressWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckReturnAddressReg <= WriteDiffReturnAddressReg or ReadDiffReturnAddressReg;
			if (WriteDiffReturnAddressReg = '1') then
				if (Sel(3) = '1') then WRegReturnAddressWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegReturnAddressWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegReturnAddressWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegReturnAddressWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReturnAddressReg : process (
		ReturnAddressToBeRead
	) begin
		PreMuxDatOutReturnAddressReg <= (others => '0');
		PreMuxDatOutReturnAddressReg(31 downto 0) <= ReturnAddressToBeRead;
	end process;
	
	
	ReturnAddressWritten <= WRegReturnAddressWritten;
	WriteAckImmediateModuleInstanceUidReg : process (Adr, We, Stb, Cyc, PreMuxAckModuleInstanceUidReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ModuleInstanceUidReg)) then 
			WriteDiffModuleInstanceUidReg <=  We and Stb and Cyc(0) and not PreMuxAckModuleInstanceUidReg;
		else
			WriteDiffModuleInstanceUidReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateModuleInstanceUidReg : process (Adr, We, Stb, Cyc, PreMuxAckModuleInstanceUidReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ModuleInstanceUidReg)) then 
			ReadDiffModuleInstanceUidReg <= not We and Stb and Cyc(0) and not PreMuxAckModuleInstanceUidReg;
		else
			ReadDiffModuleInstanceUidReg <= '0';
		end if;
	end process;
	
	SyncClockPartModuleInstanceUidReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			PreMuxAckModuleInstanceUidReg <= '0';
			WRegModuleInstanceUidWritten <= (others => '0');
		elsif rising_edge(Clk) then
			PreMuxAckModuleInstanceUidReg <= WriteDiffModuleInstanceUidReg or ReadDiffModuleInstanceUidReg;
			if (WriteDiffModuleInstanceUidReg = '1') then
				if (Sel(3) = '1') then WRegModuleInstanceUidWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegModuleInstanceUidWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegModuleInstanceUidWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegModuleInstanceUidWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForModuleInstanceUidReg : process (
		ModuleInstanceUidToBeRead
	) begin
		PreMuxDatOutModuleInstanceUidReg <= (others => '0');
		PreMuxDatOutModuleInstanceUidReg(31 downto 0) <= ModuleInstanceUidToBeRead;
	end process;
	
	
	ModuleInstanceUidWritten <= WRegModuleInstanceUidWritten;
	WriteAckImmediateActivationFrameAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckActivationFrameAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ActivationFrameAddressReg)) then 
			WriteDiffActivationFrameAddressReg <=  We and Stb and Cyc(0) and not PreMuxAckActivationFrameAddressReg;
		else
			WriteDiffActivationFrameAddressReg <= '0';
		end if;
	end process;
	
	ReadAckImmediateActivationFrameAddressReg : process (Adr, We, Stb, Cyc, PreMuxAckActivationFrameAddressReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(WASMFPGASTACK_ADR_ActivationFrameAddressReg)) then 
			ReadDiffActivationFrameAddressReg <= not We and Stb and Cyc(0) and not PreMuxAckActivationFrameAddressReg;
		else
			ReadDiffActivationFrameAddressReg <= '0';
		end if;
	end process;
	
	SyncClockPartActivationFrameAddressReg : process (Clk, Rst)
	begin 
		if (Rst = '1') then
			DelWriteDiffActivationFrameAddressReg <= '0'; 
			PreMuxAckActivationFrameAddressReg <= '0';
			WRegActivationFrameAddressWritten <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffActivationFrameAddressReg <= WriteDiffActivationFrameAddressReg;
			PreMuxAckActivationFrameAddressReg <= WriteDiffActivationFrameAddressReg or ReadDiffActivationFrameAddressReg;
			if (WriteDiffActivationFrameAddressReg = '1') then
				if (Sel(3) = '1') then WRegActivationFrameAddressWritten(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegActivationFrameAddressWritten(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegActivationFrameAddressWritten(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegActivationFrameAddressWritten(7 downto 0) <= DatIn(7 downto 0); end if;
			else
			
			end if;
		end if;
	end process;
	
	DataOutPreMuxForActivationFrameAddressReg : process (
		ActivationFrameAddressToBeRead
	) begin
		PreMuxDatOutActivationFrameAddressReg <= (others => '0');
		PreMuxDatOutActivationFrameAddressReg(31 downto 0) <= ActivationFrameAddressToBeRead;
	end process;
	
	WRegPulseActivationFrameAddressReg <= DelWriteDiffActivationFrameAddressReg;
	
	ActivationFrameAddressWritten <= WRegActivationFrameAddressWritten;

end;


library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

library work;
  use work.WasmFpgaStackPackage.all;

entity WasmFpgaStackWishbone is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		WasmFpgaStackWishboneDown : in T_WasmFpgaStackWishboneDown;
		WasmFpgaStackWishboneUp : out T_WasmFpgaStackWishboneUp;
		WasmFpgaStackWishboneUnoccupied : out T_WasmFpgaStackWishboneUnoccupied;
		WasmFpgaStackWishbone_StackBlk : out T_WasmFpgaStackWishbone_StackBlk;
		StackBlk_WasmFpgaStackWishbone : in T_StackBlk_WasmFpgaStackWishbone
	);
end;

architecture Behavioural of WasmFpgaStackWishbone is

	component StackBlk_WasmFpgaStack is
		port (
			Clk : in std_logic;
			Rst : in std_logic;
			Adr : in std_logic_vector(23 downto 0);
			Sel : in std_logic_vector(3 downto 0);
			DatIn : in std_logic_vector(31 downto 0);
			We : in std_logic;
			Stb : in std_logic;
			Cyc : in  std_logic_vector(0 downto 0);
			DatOut : out std_logic_vector(31 downto 0);
			Ack : out std_logic;
			UnoccupiedAck : out std_logic;
			Action : out std_logic_vector(2 downto 0);
			Run : out std_logic;
			WRegPulseControlReg : out std_logic;
			Busy : in std_logic;
			SizeValue : in std_logic_vector(31 downto 0);
			HighValueToBeRead : in std_logic_vector(31 downto 0);
			HighValueWritten : out std_logic_vector(31 downto 0);
			LowValueToBeRead : in std_logic_vector(31 downto 0);
			LowValueWritten : out std_logic_vector(31 downto 0);
			TypeToBeRead : in std_logic_vector(2 downto 0);
			TypeWritten : out std_logic_vector(2 downto 0);
			LocalIndex : out std_logic_vector(31 downto 0);
			StackAddressToBeRead : in std_logic_vector(31 downto 0);
			StackAddressWritten : out std_logic_vector(31 downto 0);
			WRegPulseStackAddressReg : out std_logic;
			MaxLocalsToBeRead : in std_logic_vector(31 downto 0);
			MaxLocalsWritten : out std_logic_vector(31 downto 0);
			MaxResultsToBeRead : in std_logic_vector(31 downto 0);
			MaxResultsWritten : out std_logic_vector(31 downto 0);
			ReturnAddressToBeRead : in std_logic_vector(31 downto 0);
			ReturnAddressWritten : out std_logic_vector(31 downto 0);
			ModuleInstanceUidToBeRead : in std_logic_vector(31 downto 0);
			ModuleInstanceUidWritten : out std_logic_vector(31 downto 0);
			ActivationFrameAddressToBeRead : in std_logic_vector(31 downto 0);
			ActivationFrameAddressWritten : out std_logic_vector(31 downto 0);
			WRegPulseActivationFrameAddressReg : out std_logic
		);
	end component;
	
	signal Sel : std_logic_vector(3 downto 0);
	
	signal StackBlkDatOut : std_logic_vector(31 downto 0);
	signal StackBlkAck : std_logic;
	signal StackBlkUnoccupiedAck : std_logic;

begin

	i_StackBlk_WasmFpgaStack : StackBlk_WasmFpgaStack
	  port map (
		Clk => Clk,
		Rst => Rst,
		Adr => WasmFpgaStackWishboneDown.Adr,
		Sel => Sel,
		DatIn => WasmFpgaStackWishboneDown.DatIn,
		We =>  WasmFpgaStackWishboneDown.We,
		Stb => WasmFpgaStackWishboneDown.Stb,
		Cyc => WasmFpgaStackWishboneDown.Cyc,
		DatOut => StackBlkDatOut,
		Ack => StackBlkAck,
		UnoccupiedAck => StackBlkUnoccupiedAck,
		Action => WasmFpgaStackWishbone_StackBlk.Action,
		Run => WasmFpgaStackWishbone_StackBlk.Run,
		WRegPulseControlReg => WasmFpgaStackWishbone_StackBlk.WRegPulseControlReg,
		Busy => StackBlk_WasmFpgaStackWishbone.Busy,
		SizeValue => StackBlk_WasmFpgaStackWishbone.SizeValue,
		HighValueToBeRead => StackBlk_WasmFpgaStackWishbone.HighValueToBeRead,
		HighValueWritten => WasmFpgaStackWishbone_StackBlk.HighValueWritten,
		LowValueToBeRead => StackBlk_WasmFpgaStackWishbone.LowValueToBeRead,
		LowValueWritten => WasmFpgaStackWishbone_StackBlk.LowValueWritten,
		TypeToBeRead => StackBlk_WasmFpgaStackWishbone.TypeToBeRead,
		TypeWritten => WasmFpgaStackWishbone_StackBlk.TypeWritten,
		LocalIndex => WasmFpgaStackWishbone_StackBlk.LocalIndex,
		StackAddressToBeRead => StackBlk_WasmFpgaStackWishbone.StackAddressToBeRead,
		StackAddressWritten => WasmFpgaStackWishbone_StackBlk.StackAddressWritten,
		WRegPulseStackAddressReg => WasmFpgaStackWishbone_StackBlk.WRegPulseStackAddressReg,
		MaxLocalsToBeRead => StackBlk_WasmFpgaStackWishbone.MaxLocalsToBeRead,
		MaxLocalsWritten => WasmFpgaStackWishbone_StackBlk.MaxLocalsWritten,
		MaxResultsToBeRead => StackBlk_WasmFpgaStackWishbone.MaxResultsToBeRead,
		MaxResultsWritten => WasmFpgaStackWishbone_StackBlk.MaxResultsWritten,
		ReturnAddressToBeRead => StackBlk_WasmFpgaStackWishbone.ReturnAddressToBeRead,
		ReturnAddressWritten => WasmFpgaStackWishbone_StackBlk.ReturnAddressWritten,
		ModuleInstanceUidToBeRead => StackBlk_WasmFpgaStackWishbone.ModuleInstanceUidToBeRead,
		ModuleInstanceUidWritten => WasmFpgaStackWishbone_StackBlk.ModuleInstanceUidWritten,
		ActivationFrameAddressToBeRead => StackBlk_WasmFpgaStackWishbone.ActivationFrameAddressToBeRead,
		ActivationFrameAddressWritten => WasmFpgaStackWishbone_StackBlk.ActivationFrameAddressWritten,
		WRegPulseActivationFrameAddressReg => WasmFpgaStackWishbone_StackBlk.WRegPulseActivationFrameAddressReg
	);
	
	Sel <= WasmFpgaStackWishboneDown.Sel;
	
	WasmFpgaStackWishboneUnoccupied.Adr <= WasmFpgaStackWishboneDown.Adr;
	WasmFpgaStackWishboneUnoccupied.Sel <= WasmFpgaStackWishboneDown.Sel;
	WasmFpgaStackWishboneUnoccupied.We <= WasmFpgaStackWishboneDown.We;
	WasmFpgaStackWishboneUnoccupied.Cyc <= WasmFpgaStackWishboneDown.Cyc;
	WasmFpgaStackWishboneUnoccupied.Ack <= StackBlkUnoccupiedAck;
	
	WasmFpgaStackWishboneUp.DatOut <= StackBlkDatOut;
	WasmFpgaStackWishboneUp.Ack <= StackBlkAck;

end;
